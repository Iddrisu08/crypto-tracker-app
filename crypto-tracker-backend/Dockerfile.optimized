# ===============================================
# OPTIMIZED MULTI-STAGE DOCKERFILE - BACKEND
# ===============================================
# Production-grade Flask application container with:
# - Multi-stage builds for smaller images
# - Security hardening
# - Environment-aware configuration
# - Performance optimizations

# -----------------------------------------------
# STAGE 1: BUILD DEPENDENCIES
# -----------------------------------------------
# Uses Python Alpine for smaller base image and faster builds
FROM python:3.11-alpine3.18 AS builder

# Build arguments for environment-specific builds
ARG TARGET_ENV=production
ARG BUILD_DATE
ARG VCS_REF

# Metadata labels for container identification
LABEL maintainer="Crypto Tracker Team" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.title="Crypto Tracker Backend" \
      org.opencontainers.image.description="Backend API for crypto portfolio tracking" \
      org.opencontainers.image.source="https://github.com/your-username/crypto-tracker-project"

# Install build dependencies (removed in final stage for smaller image)
RUN apk add --no-cache --virtual .build-deps \
    build-base \
    libffi-dev \
    postgresql-dev \
    musl-dev \
    linux-headers \
    curl \
    && apk add --no-cache \
    postgresql-client

# Set Python environment variables for build optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create and set working directory
WORKDIR /app

# Copy and install Python dependencies
# Separate layer for better caching - only rebuilds if requirements change
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# -----------------------------------------------
# STAGE 2: RUNTIME ENVIRONMENT
# -----------------------------------------------
# Smaller runtime image without build tools
FROM python:3.11-alpine3.18 AS runtime

# Build arguments (must be redeclared in each stage)
ARG TARGET_ENV=production
ARG BUILD_DATE
ARG VCS_REF

# Runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PATH="/home/appuser/.local/bin:$PATH" \
    TARGET_ENV=${TARGET_ENV}

# Install runtime dependencies only
RUN apk add --no-cache \
    postgresql-client \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
# Using specific UID/GID for consistency across environments
RUN addgroup -g 1000 appuser \
    && adduser -D -u 1000 -G appuser -h /home/appuser -s /bin/sh appuser

# Create application directory structure
RUN mkdir -p /app /app/logs /app/instance \
    && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser
WORKDIR /app

# Copy wheels from builder stage and install
COPY --from=builder --chown=appuser:appuser /app/wheels /wheels
RUN pip install --user --no-index --find-links=/wheels \
    gunicorn[gevent] \
    && pip install --user --no-index --find-links=/wheels /wheels/*.whl \
    && rm -rf /wheels

# Copy application code
COPY --chown=appuser:appuser . .

# Create environment-specific configuration
RUN if [ -f ".env.${TARGET_ENV}" ]; then \
        cp ".env.${TARGET_ENV}" .env; \
        echo "✅ Loaded environment config: .env.${TARGET_ENV}"; \
    else \
        echo "⚠️ Environment file not found: .env.${TARGET_ENV}"; \
    fi

# Set proper permissions
RUN chmod +x /app/entrypoint.sh 2>/dev/null || echo "No entrypoint.sh found"

# Expose port
EXPOSE 5001

# Health check with environment-aware endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5001/api/v1/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Environment-specific startup command
CMD ["sh", "-c", "\
    if [ \"$TARGET_ENV\" = \"development\" ]; then \
        echo '🔧 Starting development server...'; \
        python app.py; \
    else \
        echo '🚀 Starting production server...'; \
        gunicorn \
            --bind 0.0.0.0:5001 \
            --workers ${GUNICORN_WORKERS:-4} \
            --worker-class ${GUNICORN_WORKER_CLASS:-gevent} \
            --worker-connections ${GUNICORN_WORKER_CONNECTIONS:-1000} \
            --timeout ${GUNICORN_TIMEOUT:-120} \
            --keepalive ${GUNICORN_KEEPALIVE:-5} \
            --max-requests ${GUNICORN_MAX_REQUESTS:-1000} \
            --max-requests-jitter ${GUNICORN_MAX_REQUESTS_JITTER:-100} \
            --preload \
            --access-logfile - \
            --error-logfile - \
            --log-level ${LOG_LEVEL:-info} \
            app:app; \
    fi"]

# -----------------------------------------------
# STAGE 3: DEVELOPMENT VARIANT (OPTIONAL)
# -----------------------------------------------
FROM runtime AS development

# Install development dependencies
USER root
RUN apk add --no-cache \
    git \
    bash \
    vim \
    && rm -rf /var/cache/apk/*

USER appuser

# Install development Python packages
RUN pip install --user \
    pytest \
    pytest-cov \
    black \
    flake8 \
    ipdb

# Override health check for development (more lenient)
HEALTHCHECK --interval=60s --timeout=30s --start-period=60s --retries=2 \
    CMD curl -f http://localhost:5001/api/v1/health || exit 1

# Development command with hot reload
CMD ["python", "app.py"]

# -----------------------------------------------
# STAGE 4: TESTING VARIANT
# -----------------------------------------------
FROM runtime AS testing

# Install testing dependencies
USER root
RUN apk add --no-cache \
    git \
    && rm -rf /var/cache/apk/*

USER appuser

# Install testing packages
RUN pip install --user \
    pytest \
    pytest-cov \
    pytest-xdist \
    factory-boy \
    freezegun

# Copy test configuration
COPY --chown=appuser:appuser tests/ tests/
COPY --chown=appuser:appuser pytest.ini ./
COPY --chown=appuser:appuser .coveragerc ./

# Testing command
CMD ["pytest", "tests/", "-v", "--cov=.", "--cov-report=xml", "--cov-report=html"]

# -----------------------------------------------
# BUILD OPTIMIZATION NOTES
# -----------------------------------------------
# To build for different environments:
# 
# Development:
#   docker build --target development -t crypto-backend:dev .
# 
# Production:  
#   docker build --target runtime -t crypto-backend:prod .
# 
# Testing:
#   docker build --target testing -t crypto-backend:test .
#
# With build args:
#   docker build --build-arg TARGET_ENV=production \
#                --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#                --build-arg VCS_REF=$(git rev-parse HEAD) \
#                -t crypto-backend:latest .