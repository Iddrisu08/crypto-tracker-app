# ===============================================
# STAGING ENVIRONMENT CONFIGURATION
# ===============================================
# This file contains settings for staging environment.
# Production-like setup for testing before going live.

# ENVIRONMENT IDENTIFICATION
NODE_ENV=staging
FLASK_ENV=staging
FLASK_DEBUG=false  # No debug info exposed
ENV_NAME=staging

# DATABASE CONFIGURATION
# PostgreSQL managed database (Render PostgreSQL)
# This will be injected by Render as DATABASE_URL
DATABASE_URL=${DATABASE_URL}
DATABASE_ECHO=false  # No SQL query logging in staging
DATABASE_POOL_SIZE=5
DATABASE_MAX_OVERFLOW=10

# REDIS CONFIGURATION
# Managed Redis instance (Render Redis)
REDIS_URL=${REDIS_URL}
CACHE_TIMEOUT=300  # 5 minutes cache

# AUTHENTICATION & SECURITY
# Strong secrets (injected by CI/CD or Render)
JWT_SECRET_KEY=${JWT_SECRET_KEY}
JWT_ACCESS_TOKEN_EXPIRES=3600  # 1 hour
SECRET_KEY=${SECRET_KEY}

# API CONFIGURATION
# Moderate rate limiting for staging tests
RATE_LIMIT_PER_MINUTE=200
API_VERSION=v1

# CORS CONFIGURATION
# Allow staging frontend URL
FRONTEND_URL=${FRONTEND_URL}
CORS_ORIGINS=${FRONTEND_URL}

# EXTERNAL APIS
COINGECKO_API_URL=https://api.coingecko.com/api/v3
COINGECKO_API_KEY=${COINGECKO_API_KEY}  # Optional

# LOGGING CONFIGURATION
LOG_LEVEL=INFO  # Less verbose than development
LOG_TO_FILE=true
LOG_FILE_PATH=./logs/crypto_tracker_staging.log

# STAGING FEATURES
# Some debug features enabled for staging testing
ENABLE_DEBUG_ENDPOINTS=false
ENABLE_MOCK_DATA=false  # Use real data in staging
SKIP_EMAIL_VERIFICATION=true  # May skip for easier testing

# MONITORING & PERFORMANCE
# Enable basic monitoring in staging
ENABLE_METRICS=true
ENABLE_TRACING=false  # Might be too verbose

# BACKUP CONFIGURATION
# Light backup schedule for staging
ENABLE_AUTOMATED_BACKUPS=true
BACKUP_FREQUENCY=daily
BACKUP_RETENTION_DAYS=7

# NOTIFICATION SETTINGS
# Enable but limit notifications in staging
ENABLE_PRICE_ALERTS=true
ENABLE_EMAIL_NOTIFICATIONS=false  # Avoid spam
EMAIL_BACKEND=console  # Log emails instead of sending

# STAGING SAFETY
# Prevent staging data corruption
SEED_TEST_DATA=false
AUTO_MIGRATE_DB=true  # Auto-migrate but carefully

# PORT CONFIGURATION
PORT=${PORT:-5001}
HOST=0.0.0.0

# SSL/TLS
USE_HTTPS=true  # Staging should use HTTPS

# SECURITY SETTINGS
# Production-like security but slightly relaxed for testing
BYPASS_RATE_LIMITS=false
ALLOW_WEAK_PASSWORDS=false
DISABLE_CSRF=false

# PERFORMANCE SETTINGS
# Production-like performance settings
WORKER_PROCESSES=2
WORKER_TIMEOUT=120
KEEP_ALIVE=2

# ERROR HANDLING
# Capture errors but don't crash
SENTRY_DSN=${SENTRY_DSN}  # Error tracking
SENTRY_ENVIRONMENT=staging

# FEATURE FLAGS
# Test new features in staging first
ENABLE_ADVANCED_ANALYTICS=true
ENABLE_PORTFOLIO_SHARING=false  # Test feature

# DATABASE MIGRATIONS
# Safe migration settings
RUN_MIGRATIONS_ON_STARTUP=true
MIGRATION_TIMEOUT=300  # 5 minutes

# STAGING IDENTIFICATION
# Add staging indicators to prevent confusion
STAGING_BANNER=true
ENVIRONMENT_COLOR=#FFA500  # Orange for staging

# RESOURCE LIMITS
# Smaller than production but realistic
MAX_PORTFOLIO_SIZE=1000
MAX_TRANSACTIONS_PER_USER=10000
MAX_PRICE_ALERTS=50

# TESTING SUPPORT
# Support for automated testing in staging
ENABLE_API_TESTING_ENDPOINTS=true
TEST_USER_AUTO_CLEANUP=true