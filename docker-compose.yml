version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto_tracker_db
    environment:
      POSTGRES_DB: crypto_tracker
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - crypto_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto_tracker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./crypto-tracker-backend
      dockerfile: Dockerfile
    container_name: crypto_tracker_backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://crypto_user:crypto_password@postgres:5432/crypto_tracker
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-production-jwt-secret-here
      - SECRET_KEY=your-production-secret-here
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "5001:5001"
    depends_on:
      - postgres
      - redis
    networks:
      - crypto_network
    volumes:
      - ./crypto-tracker-backend:/app
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./crypto-tracker-frontend
      dockerfile: Dockerfile
    container_name: crypto_tracker_frontend
    environment:
      - VITE_API_URL=http://localhost:5001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - crypto_network
    volumes:
      - ./crypto-tracker-frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: crypto_tracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - crypto_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  crypto_network:
    driver: bridge