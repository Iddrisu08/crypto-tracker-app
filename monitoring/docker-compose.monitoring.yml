# ===============================================
# MONITORING STACK DOCKER COMPOSE
# ===============================================
# Complete monitoring infrastructure including:
# - Prometheus for metrics collection
# - Grafana for visualization
# - AlertManager for alerting
# - Log aggregation with ELK stack

version: '3.8'

# -----------------------------------------------
# NETWORKS
# -----------------------------------------------
networks:
  monitoring:
    driver: bridge
    name: crypto_monitoring_network
  
  crypto_network:
    external: true
    name: crypto_tracker_network

# -----------------------------------------------
# VOLUMES
# -----------------------------------------------
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local

# -----------------------------------------------
# SERVICES
# -----------------------------------------------
services:

  # -----------------------------------------------
  # METRICS COLLECTION
  # -----------------------------------------------
  
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: crypto_prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./rules:/etc/prometheus/rules:ro
      - ./alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    
    networks:
      - monitoring
      - crypto_network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "monitoring.prometheus=true"

  # -----------------------------------------------
  # VISUALIZATION
  # -----------------------------------------------
  
  grafana:
    image: grafana/grafana:10.0.0
    container_name: crypto_grafana
    restart: unless-stopped
    
    environment:
      # Security
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      
      # Database
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      
      # Server settings
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      
      # Authentication
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      
      # Features
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      
      # Logging
      - GF_LOG_LEVEL=info
      - GF_LOG_MODE=console,file
      
      # Alerting
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
    
    ports:
      - "3001:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    
    networks:
      - monitoring
      - crypto_network
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "monitoring.grafana=true"

  # -----------------------------------------------
  # ALERTING
  # -----------------------------------------------
  
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: crypto_alertmanager
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    
    ports:
      - "9093:9093"
    
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # -----------------------------------------------
  # SYSTEM MONITORING
  # -----------------------------------------------
  
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: crypto_node_exporter
    restart: unless-stopped
    
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    
    ports:
      - "9100:9100"
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /run/systemd/private:/run/systemd/private:ro
    
    networks:
      - monitoring
    
    pid: host
    
    labels:
      - "monitoring.node-exporter=true"

  # -----------------------------------------------
  # CONTAINER MONITORING
  # -----------------------------------------------
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: crypto_cadvisor
    restart: unless-stopped
    
    ports:
      - "8080:8080"
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    
    networks:
      - monitoring
    
    privileged: true
    
    devices:
      - /dev/kmsg
    
    labels:
      - "monitoring.cadvisor=true"

  # -----------------------------------------------
  # DATABASE MONITORING
  # -----------------------------------------------
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: crypto_postgres_exporter
    restart: unless-stopped
    
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-crypto_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-crypto_tracker}?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    
    ports:
      - "9187:9187"
    
    volumes:
      - ./postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    
    networks:
      - monitoring
      - crypto_network
    
    depends_on:
      - postgres
    
    labels:
      - "monitoring.postgres-exporter=true"

  # -----------------------------------------------
  # CACHE MONITORING
  # -----------------------------------------------
  
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: crypto_redis_exporter
    restart: unless-stopped
    
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_LOG_FORMAT=json
    
    ports:
      - "9121:9121"
    
    networks:
      - monitoring
      - crypto_network
    
    depends_on:
      - redis
    
    labels:
      - "monitoring.redis-exporter=true"

  # -----------------------------------------------
  # UPTIME MONITORING
  # -----------------------------------------------
  
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: crypto_blackbox_exporter
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
      - '--log.level=info'
    
    ports:
      - "9115:9115"
    
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    
    networks:
      - monitoring
      - crypto_network
    
    labels:
      - "monitoring.blackbox-exporter=true"

  # -----------------------------------------------
  # LOG AGGREGATION
  # -----------------------------------------------
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: crypto_elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    
    ports:
      - "9200:9200"
    
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    
    networks:
      - monitoring
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "monitoring.elasticsearch=true"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: crypto_logstash
    restart: unless-stopped
    
    ports:
      - "5044:5044"    # Beats input
      - "12201:12201"  # GELF input
    
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
      - logstash_data:/usr/share/logstash/data
    
    networks:
      - monitoring
      - crypto_network
    
    depends_on:
      - elasticsearch
    
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
    
    labels:
      - "monitoring.logstash=true"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: crypto_kibana
    restart: unless-stopped
    
    ports:
      - "5601:5601"
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    
    networks:
      - monitoring
    
    depends_on:
      - elasticsearch
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    labels:
      - "monitoring.kibana=true"

  # -----------------------------------------------
  # LOG SHIPPING
  # -----------------------------------------------
  
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: crypto_filebeat
    restart: unless-stopped
    
    user: root
    
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
    
    networks:
      - monitoring
      - crypto_network
    
    depends_on:
      - logstash
    
    labels:
      - "monitoring.filebeat=true"

# -----------------------------------------------
# PROFILES FOR SELECTIVE DEPLOYMENT
# -----------------------------------------------

  # Minimal monitoring (Prometheus + Grafana only)
  prometheus-minimal:
    profiles: ["minimal"]
    extends:
      service: prometheus
  
  grafana-minimal:
    profiles: ["minimal"]
    extends:
      service: grafana

  # Full monitoring (all services)
  # No profile needed - runs by default