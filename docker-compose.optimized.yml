# ===============================================
# OPTIMIZED DOCKER COMPOSE CONFIGURATION
# ===============================================
# Production-grade multi-service setup with:
# - Environment-aware service configuration
# - Health checks and dependencies
# - Security and performance optimizations
# - Monitoring and logging

version: '3.8'

# -----------------------------------------------
# SHARED CONFIGURATION
# -----------------------------------------------
x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-production}
  TARGET_ENV: ${TARGET_ENV:-production}
  TZ: ${TZ:-UTC}

x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-restart-policy: &restart-unless-stopped
  restart: unless-stopped

# -----------------------------------------------
# NETWORKS
# -----------------------------------------------
networks:
  crypto_network:
    driver: bridge
    name: crypto_tracker_network
    ipam:
      config:
        - subnet: 172.20.0.0/16

  monitoring_network:
    driver: bridge
    name: crypto_monitoring_network
    internal: true

# -----------------------------------------------
# VOLUMES
# -----------------------------------------------
volumes:
  # Database volumes with backup support
  postgres_data:
    driver: local
    name: crypto_postgres_data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./volumes}/postgres

  redis_data:
    driver: local
    name: crypto_redis_data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./volumes}/redis

  # Application volumes
  backend_logs:
    driver: local
    name: crypto_backend_logs

  nginx_logs:
    driver: local
    name: crypto_nginx_logs

  # Monitoring volumes
  prometheus_data:
    driver: local
    name: crypto_prometheus_data

  grafana_data:
    driver: local
    name: crypto_grafana_data

# -----------------------------------------------
# SERVICES
# -----------------------------------------------
services:

  # -----------------------------------------------
  # DATABASE SERVICES
  # -----------------------------------------------
  
  postgres:
    image: postgres:15-alpine
    container_name: crypto_tracker_db
    <<: [*restart-unless-stopped, *default-logging]
    
    environment:
      <<: *common-variables
      POSTGRES_DB: ${POSTGRES_DB:-crypto_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-crypto_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - crypto_network
    
    # Health check with retry logic
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_user} -d ${POSTGRES_DB:-crypto_tracker}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Security and performance optimizations
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: crypto_tracker_redis
    <<: [*restart-unless-stopped, *default-logging]
    
    environment:
      <<: *common-variables
    
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    networks:
      - crypto_network
    
    # Redis with custom configuration
    command: redis-server /etc/redis/redis.conf
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # -----------------------------------------------
  # APPLICATION SERVICES
  # -----------------------------------------------
  
  backend:
    build:
      context: ./crypto-tracker-backend
      dockerfile: Dockerfile.optimized
      target: ${DOCKER_TARGET:-runtime}
      args:
        TARGET_ENV: ${TARGET_ENV:-production}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    
    container_name: crypto_tracker_backend
    <<: [*restart-unless-stopped, *default-logging]
    
    environment:
      <<: *common-variables
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-crypto_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-crypto_tracker}
      REDIS_URL: redis://redis:6379/0
      
      # Application configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SECRET_KEY: ${SECRET_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Performance settings
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS:-gevent}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-120}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    
    volumes:
      - backend_logs:/app/logs
      - ./crypto-tracker-backend/.env.${TARGET_ENV:-production}:/app/.env:ro
    
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    
    networks:
      - crypto_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'

  frontend:
    build:
      context: ./crypto-tracker-frontend
      dockerfile: Dockerfile.optimized
      target: ${DOCKER_TARGET:-runtime}
      args:
        TARGET_ENV: ${TARGET_ENV:-production}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    
    container_name: crypto_tracker_frontend
    <<: [*restart-unless-stopped, *default-logging]
    
    environment:
      <<: *common-variables
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
    
    volumes:
      - nginx_logs:/var/log/nginx
      - ./crypto-tracker-frontend/.env.${TARGET_ENV:-production}:/usr/share/nginx/html/.env:ro
    
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    
    networks:
      - crypto_network
    
    depends_on:
      backend:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # -----------------------------------------------
  # REVERSE PROXY (PRODUCTION)
  # -----------------------------------------------
  
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: crypto_tracker_proxy
    <<: [*restart-unless-stopped, *default-logging]
    
    profiles:
      - production
    
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    networks:
      - crypto_network
    
    depends_on:
      - frontend
      - backend
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # -----------------------------------------------
  # MONITORING SERVICES (OPTIONAL)
  # -----------------------------------------------
  
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto_tracker_prometheus
    <<: [*restart-unless-stopped, *default-logging]
    
    profiles:
      - monitoring
    
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    ports:
      - "9090:9090"
    
    networks:
      - crypto_network
      - monitoring_network
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: crypto_tracker_grafana
    <<: [*restart-unless-stopped, *default-logging]
    
    profiles:
      - monitoring
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    
    ports:
      - "3001:3000"
    
    networks:
      - crypto_network
      - monitoring_network
    
    depends_on:
      - prometheus

# -----------------------------------------------
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# -----------------------------------------------

# Development profile
---
# Development overrides
version: '3.8'
services:
  backend:
    profiles:
      - development
    build:
      target: development
    volumes:
      - ./crypto-tracker-backend:/app:cached
      - /app/node_modules
    environment:
      FLASK_DEBUG: "true"
      LOG_LEVEL: DEBUG
    command: python app.py

  frontend:
    profiles:
      - development
    build:
      target: development
    volumes:
      - ./crypto-tracker-frontend:/app:cached
      - /app/node_modules
    ports:
      - "5173:5173"
    command: npm run dev -- --host 0.0.0.0