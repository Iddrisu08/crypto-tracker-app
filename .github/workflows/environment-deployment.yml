name: 🌍 Environment-Based Deployment

# TRIGGER: Environment-specific deployment workflow
on:
  push:
    branches: 
      - main         # Deploy to production
      - develop      # Deploy to staging
  pull_request:
    branches: [ main ]  # Test deployment on PRs
  workflow_dispatch:    # Manual deployment trigger
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # JOB 1: DETERMINE DEPLOYMENT ENVIRONMENT
  determine-environment:
    name: 🎯 Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env-logic.outputs.environment }}
      should_deploy: ${{ steps.env-logic.outputs.should_deploy }}
    
    steps:
      - name: 🧠 Determine Environment Logic
        id: env-logic
        run: |
          # Manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          
          # Branch-based deployment
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          
          # Pull request - test only
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 📊 Environment Summary
        run: |
          echo "🎯 Target Environment: ${{ steps.env-logic.outputs.environment }}"
          echo "🚀 Should Deploy: ${{ steps.env-logic.outputs.should_deploy }}"
          echo "📝 Event: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref }}"

  # JOB 2: ENVIRONMENT VALIDATION
  validate-environment:
    name: ✅ Validate Environment Configuration
    runs-on: ubuntu-latest
    needs: determine-environment
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🔧 Install Environment Manager Dependencies
        run: |
          pip install python-dotenv
          chmod +x scripts/environment-manager.sh
      
      - name: ✅ Validate Environment Configuration
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        run: |
          echo "🔍 Validating $TARGET_ENV environment configuration..."
          
          # Validate backend environment
          cd crypto-tracker-backend
          python environment_config.py --env $TARGET_ENV --validate
          cd ..
          
          # Validate frontend environment files exist
          if [ -f "crypto-tracker-frontend/.env.$TARGET_ENV" ]; then
            echo "✅ Frontend environment file found"
          else
            echo "❌ Frontend environment file missing: .env.$TARGET_ENV"
            exit 1
          fi
          
          echo "✅ Environment validation completed!"

  # JOB 3: RUN TESTS WITH ENVIRONMENT
  test-with-environment:
    name: 🧪 Test with Environment Config
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-environment]
    
    strategy:
      matrix:
        test-type: [backend, frontend]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_crypto_tracker
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        if: matrix.test-type == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🟢 Setup Node.js
        if: matrix.test-type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: crypto-tracker-frontend/package-lock.json
      
      - name: 🧪 Run Backend Tests with Environment
        if: matrix.test-type == 'backend'
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_crypto_tracker
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd crypto-tracker-backend
          
          # Load environment configuration
          python -c "
          import environment_config
          config = environment_config.EnvironmentConfig('$TARGET_ENV')
          config.print_summary()
          "
          
          # Install dependencies
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
          # Run tests
          pytest tests/ -v --cov=. --cov-report=xml
      
      - name: 🧪 Run Frontend Tests with Environment
        if: matrix.test-type == 'frontend'
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        run: |
          cd crypto-tracker-frontend
          
          # Copy environment file
          cp .env.$TARGET_ENV .env
          
          # Install dependencies
          npm ci
          
          # Run tests
          npm run test:run

  # JOB 4: BUILD WITH ENVIRONMENT
  build-with-environment:
    name: 🏗️ Build with Environment Configuration
    runs-on: ubuntu-latest
    needs: [determine-environment, test-with-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Build Backend with Environment
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        uses: docker/build-push-action@v5
        with:
          context: ./crypto-tracker-backend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-backend:${{ needs.determine-environment.outputs.environment }}
            ghcr.io/${{ github.repository }}-backend:${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}
          build-args: |
            TARGET_ENV=${{ needs.determine-environment.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏗️ Build Frontend with Environment
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        uses: docker/build-push-action@v5
        with:
          context: ./crypto-tracker-frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-frontend:${{ needs.determine-environment.outputs.environment }}
            ghcr.io/${{ github.repository }}-frontend:${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}
          build-args: |
            TARGET_ENV=${{ needs.determine-environment.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 5: DEPLOY TO ENVIRONMENT
  deploy-to-environment:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, build-with-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Prepare Environment Deployment
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        run: |
          echo "🎯 Preparing deployment for $TARGET_ENV environment"
          
          # Create deployment info
          cat > deployment-info.json << EOF
          {
            "environment": "$TARGET_ENV",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow_run": "${{ github.run_id }}",
            "actor": "${{ github.actor }}"
          }
          EOF
      
      - name: 🚀 Deploy to Render
        id: deploy
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "🚀 Deploying to $TARGET_ENV environment..."
          
          # Set service IDs based on environment
          case $TARGET_ENV in
            "staging")
              BACKEND_SERVICE_ID="${{ secrets.RENDER_STAGING_BACKEND_ID }}"
              FRONTEND_SERVICE_ID="${{ secrets.RENDER_STAGING_FRONTEND_ID }}"
              DEPLOYMENT_URL="https://crypto-tracker-staging.onrender.com"
              ;;
            "production")
              BACKEND_SERVICE_ID="${{ secrets.RENDER_PRODUCTION_BACKEND_ID }}"
              FRONTEND_SERVICE_ID="${{ secrets.RENDER_PRODUCTION_FRONTEND_ID }}"
              DEPLOYMENT_URL="https://crypto-tracker.onrender.com"
              ;;
            *)
              echo "❌ Unknown environment: $TARGET_ENV"
              exit 1
              ;;
          esac
          
          # Deploy Backend
          echo "🔄 Deploying backend..."
          curl -X POST "https://api.render.com/v1/services/${BACKEND_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}' || echo "Backend deployment triggered"
          
          # Deploy Frontend
          echo "🔄 Deploying frontend..."
          curl -X POST "https://api.render.com/v1/services/${FRONTEND_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}' || echo "Frontend deployment triggered"
          
          # Set output for environment URL
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployment completed for $TARGET_ENV environment!"
      
      - name: 🔍 Post-Deployment Health Check
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment_url }}
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Wait for deployment to be ready
          sleep 60
          
          # Check backend health
          echo "🔍 Checking backend health..."
          for i in {1..5}; do
            if curl -f -s "${DEPLOYMENT_URL}/api/v1/health" > /dev/null; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⏳ Waiting for backend... (attempt $i/5)"
              sleep 30
            fi
          done
          
          # Check frontend
          echo "🔍 Checking frontend..."
          if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
            echo "✅ Frontend health check passed"
          else
            echo "⚠️ Frontend health check failed, but deployment may still be starting"
          fi
      
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  # JOB 6: NOTIFICATION
  notify-deployment:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-to-environment]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
      - name: 📢 Deployment Notification
        env:
          TARGET_ENV: ${{ needs.determine-environment.outputs.environment }}
          DEPLOYMENT_STATUS: ${{ needs.deploy-to-environment.result }}
          DEPLOYMENT_URL: ${{ needs.deploy-to-environment.outputs.deployment_url }}
        run: |
          if [ "$DEPLOYMENT_STATUS" = "success" ]; then
            echo "✅ Deployment to $TARGET_ENV succeeded!"
            echo "🌐 Application URL: $DEPLOYMENT_URL"
          else
            echo "❌ Deployment to $TARGET_ENV failed!"
            echo "🔗 Check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi