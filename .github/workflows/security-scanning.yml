name: üõ°Ô∏è Security Scanning Pipeline

# TRIGGER: Comprehensive security scanning on code changes
on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - sast
        - dependencies
        - containers
        - infrastructure

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # -----------------------------------------------
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # -----------------------------------------------
  sast-scanning:
    name: üîç Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    permissions:
      security-events: write  # For uploading SARIF results
      contents: read
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      # -----------------------------------------------
      # SEMGREP SECURITY ANALYSIS
      # -----------------------------------------------
      - name: üîç Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/cwe-top-25
            p/javascript
            p/typescript
            p/python
            p/docker
            p/nginx
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
      
      # -----------------------------------------------
      # CODEQL ANALYSIS
      # -----------------------------------------------
      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          queries: security-extended,security-and-quality
      
      - name: üèóÔ∏è Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v2
      
      - name: üìä Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript,python"
      
      # -----------------------------------------------
      # BANDIT PYTHON SECURITY ANALYSIS
      # -----------------------------------------------
      - name: üêç Setup Python for Bandit
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üîç Run Bandit Security Scan
        run: |
          pip install bandit[toml]
          bandit -r crypto-tracker-backend/ -f json -o bandit-report.json || true
          bandit -r crypto-tracker-backend/ -f txt || true
      
      - name: üì§ Upload Bandit Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
      
      # -----------------------------------------------
      # ESLINT SECURITY ANALYSIS
      # -----------------------------------------------
      - name: üü¢ Setup Node.js for ESLint
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: crypto-tracker-frontend/package-lock.json
      
      - name: üì¶ Install Frontend Dependencies
        working-directory: ./crypto-tracker-frontend
        run: npm ci
      
      - name: üîç Run ESLint Security Analysis
        working-directory: ./crypto-tracker-frontend
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../eslint-security-report.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx || true
        continue-on-error: true
      
      - name: üì§ Upload ESLint Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-security-report
          path: eslint-security-report.json

  # -----------------------------------------------
  # DEPENDENCY VULNERABILITY SCANNING
  # -----------------------------------------------
  dependency-scanning:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      # -----------------------------------------------
      # PYTHON DEPENDENCY SCANNING (BACKEND)
      # -----------------------------------------------
      - name: üêç Python Dependency Scan (Safety)
        if: matrix.component == 'backend'
        run: |
          pip install safety
          # Scan for known vulnerabilities
          safety check --file crypto-tracker-backend/requirements.txt --json --output safety-report.json || true
          safety check --file crypto-tracker-backend/requirements.txt || true
        continue-on-error: true
      
      - name: üêç Python Dependency Audit (pip-audit)
        if: matrix.component == 'backend'
        run: |
          pip install pip-audit
          pip-audit --requirement crypto-tracker-backend/requirements.txt --format json --output pip-audit-report.json || true
          pip-audit --requirement crypto-tracker-backend/requirements.txt || true
        continue-on-error: true
      
      # -----------------------------------------------
      # NODE.JS DEPENDENCY SCANNING (FRONTEND)
      # -----------------------------------------------
      - name: üü¢ Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: üîç NPM Security Audit
        if: matrix.component == 'frontend'
        working-directory: ./crypto-tracker-frontend
        run: |
          # Run npm audit and save results
          npm audit --audit-level=moderate --json > ../npm-audit-report.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true
      
      - name: üîç Yarn Security Audit (if yarn.lock exists)
        if: matrix.component == 'frontend'
        working-directory: ./crypto-tracker-frontend
        run: |
          if [ -f "yarn.lock" ]; then
            yarn audit --level moderate --json > ../yarn-audit-report.json || true
            yarn audit --level moderate || true
          fi
        continue-on-error: true
      
      # -----------------------------------------------
      # SNYK VULNERABILITY SCANNING
      # -----------------------------------------------
      - name: üîç Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-report.json
        continue-on-error: true
      
      - name: üì§ Upload Dependency Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-${{ matrix.component }}
          path: |
            *-report.json
            *-audit-report.json

  # -----------------------------------------------
  # CONTAINER SECURITY SCANNING
  # -----------------------------------------------
  container-security-scanning:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # -----------------------------------------------
      # BUILD IMAGES FOR SCANNING
      # -----------------------------------------------
      - name: üèóÔ∏è Build Docker Image
        run: |
          if [ "${{ matrix.component }}" == "backend" ]; then
            docker build -f crypto-tracker-backend/Dockerfile.optimized -t crypto-${{ matrix.component }}:scan crypto-tracker-backend/
          else
            docker build -f crypto-tracker-frontend/Dockerfile.optimized -t crypto-${{ matrix.component }}:scan crypto-tracker-frontend/
          fi
      
      # -----------------------------------------------
      # TRIVY VULNERABILITY SCANNING
      # -----------------------------------------------
      - name: üîç Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: crypto-${{ matrix.component }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}-results.sarif'
        continue-on-error: true
      
      - name: üîç Run Trivy JSON Report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: crypto-${{ matrix.component }}:scan
          format: 'json'
          output: 'trivy-${{ matrix.component }}-report.json'
        continue-on-error: true
      
      # -----------------------------------------------
      # DOCKER BENCH SECURITY
      # -----------------------------------------------
      - name: üê≥ Docker Bench Security
        run: |
          # Clone and run Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh -c container_images | tee ../docker-bench-${{ matrix.component }}.txt
        continue-on-error: true
      
      # -----------------------------------------------
      # HADOLINT DOCKERFILE LINTING
      # -----------------------------------------------
      - name: üîç Hadolint Dockerfile Security Scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: crypto-tracker-${{ matrix.component }}/Dockerfile.optimized
          format: sarif
          output-file: hadolint-${{ matrix.component }}-results.sarif
          no-fail: true
      
      # -----------------------------------------------
      # UPLOAD RESULTS
      # -----------------------------------------------
      - name: üì§ Upload Trivy SARIF Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-${{ matrix.component }}-results.sarif
          category: trivy-${{ matrix.component }}
        continue-on-error: true
      
      - name: üì§ Upload Container Security Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-${{ matrix.component }}
          path: |
            trivy-${{ matrix.component }}-report.json
            docker-bench-${{ matrix.component }}.txt
            hadolint-${{ matrix.component }}-results.sarif

  # -----------------------------------------------
  # INFRASTRUCTURE AS CODE SCANNING
  # -----------------------------------------------
  iac-security-scanning:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      # -----------------------------------------------
      # CHECKOV IaC SECURITY SCANNING
      # -----------------------------------------------
      - name: üîç Run Checkov IaC Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose,github_actions,yaml,json
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
        continue-on-error: true
      
      # -----------------------------------------------
      # KICS INFRASTRUCTURE SCANNING
      # -----------------------------------------------
      - name: üîç KICS Infrastructure Scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_formats: 'json,sarif'
          output_path: 'kics-results'
          platform_type: 'docker,dockerfile,k8s,yaml'
          exclude_categories: 'Encryption,Observability'
          exclude_severities: 'info'
        continue-on-error: true
      
      # -----------------------------------------------
      # DOCKER COMPOSE SECURITY ANALYSIS
      # -----------------------------------------------
      - name: üê≥ Docker Compose Security Analysis
        run: |
          # Install docker-compose-security-scanner
          pip install docker-compose-security-scanner
          
          # Scan all Docker Compose files
          find . -name "docker-compose*.yml" -exec docker-compose-security-scanner {} \; > docker-compose-security.txt || true
        continue-on-error: true
      
      # -----------------------------------------------
      # GITHUB ACTIONS SECURITY ANALYSIS
      # -----------------------------------------------
      - name: üîç GitHub Actions Security Analysis
        run: |
          # Use actionlint for GitHub Actions security
          bash <(curl -s https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -format '{{json .}}' .github/workflows/*.yml > actionlint-report.json || true
          ./actionlint .github/workflows/*.yml || true
        continue-on-error: true
      
      - name: üì§ Upload IaC Security Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: iac-security-results
          path: |
            checkov-results.sarif
            kics-results/
            docker-compose-security.txt
            actionlint-report.json
      
      - name: üì§ Upload Checkov SARIF Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov
        continue-on-error: true

  # -----------------------------------------------
  # SECRETS DETECTION
  # -----------------------------------------------
  secrets-detection:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      # -----------------------------------------------
      # TRUFFLESEC SECRETS DETECTION
      # -----------------------------------------------
      - name: üîç TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-report.json
        continue-on-error: true
      
      # -----------------------------------------------
      # GITLEAKS SECRETS DETECTION
      # -----------------------------------------------
      - name: üîç GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
        continue-on-error: true
      
      # -----------------------------------------------
      # DETECT-SECRETS SCAN
      # -----------------------------------------------
      - name: üîç IBM Detect-Secrets Scan
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline --exclude-files package-lock.json --exclude-files yarn.lock
          detect-secrets audit .secrets.baseline --report --output detect-secrets-report.json || true
        continue-on-error: true
      
      - name: üì§ Upload Secrets Detection Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secrets-detection-results
          path: |
            trufflehog-report.json
            detect-secrets-report.json

  # -----------------------------------------------
  # SECURITY REPORT CONSOLIDATION
  # -----------------------------------------------
  security-report:
    name: üìä Security Report Generation
    runs-on: ubuntu-latest
    needs: [sast-scanning, dependency-scanning, container-security-scanning, iac-security-scanning, secrets-detection]
    if: always()
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üì• Download All Security Artifacts
        uses: actions/download-artifact@v3
        with:
          path: security-results/
      
      - name: üêç Setup Python for Report Generation
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üìä Generate Consolidated Security Report
        run: |
          pip install jinja2 json2html
          python scripts/generate-security-report.py security-results/ > security-summary.html
        continue-on-error: true
      
      - name: üì§ Upload Consolidated Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: consolidated-security-report
          path: |
            security-summary.html
            security-results/
      
      # -----------------------------------------------
      # SECURITY METRICS
      # -----------------------------------------------
      - name: üìà Calculate Security Metrics
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count vulnerabilities from different sources
          find security-results -name "*.json" -exec jq -r '.vulnerabilities[]?.severity // empty' {} \; 2>/dev/null | sort | uniq -c > vuln-summary.txt || true
          
          if [ -s vuln-summary.txt ]; then
            echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat vuln-summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Scan Results:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Detailed Reports:** Check individual job outputs" >> $GITHUB_STEP_SUMMARY
      
      # -----------------------------------------------
      # SECURITY POLICY ENFORCEMENT
      # -----------------------------------------------
      - name: üõ°Ô∏è Security Policy Enforcement
        run: |
          # Check for critical vulnerabilities
          CRITICAL_VULNS=$(find security-results -name "*.json" -exec jq -r 'select(.vulnerabilities) | .vulnerabilities[] | select(.severity == "CRITICAL" or .severity == "critical")' {} \; 2>/dev/null | wc -l || echo "0")
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå CRITICAL VULNERABILITIES FOUND: $CRITICAL_VULNS"
            echo "::error::Critical vulnerabilities must be resolved before deployment"
            # In production, you might want to fail the build here
            # exit 1
          else
            echo "‚úÖ No critical vulnerabilities found"
          fi