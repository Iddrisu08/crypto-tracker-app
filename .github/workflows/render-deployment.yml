name: 🚀 Render Deployment Pipeline

# TRIGGER: Automated deployment to Render on main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - preview
      
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  RENDER_API_URL: 'https://api.render.com/v1'

jobs:
  # -----------------------------------------------
  # PRE-DEPLOYMENT VALIDATION
  # -----------------------------------------------
  
  pre-deployment-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      deployment_env: ${{ steps.validation.outputs.deployment_env }}
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Check what files have changed
      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'crypto-tracker-backend/**'
              - 'requirements.txt'
              - 'render.yaml'
            frontend:
              - 'crypto-tracker-frontend/**'
              - 'package*.json'
              - 'render.yaml'
            config:
              - '.github/workflows/**'
              - 'docker-compose*.yml'
              - 'render.yaml'
      
      # Validate deployment conditions
      - name: ✅ Validate Deployment Conditions  
        id: validation
        run: |
          # Determine environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          else
            ENV="preview"
          fi
          
          echo "deployment_env=$ENV" >> $GITHUB_OUTPUT
          
          # Check if should deploy
          SHOULD_DEPLOY="false"
          
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "Force deployment requested"
            SHOULD_DEPLOY="true"
          elif [ "${{ steps.changes.outputs.backend }}" = "true" ] || [ "${{ steps.changes.outputs.frontend }}" = "true" ]; then
            echo "Application changes detected"
            SHOULD_DEPLOY="true"
          elif [ "${{ steps.changes.outputs.config }}" = "true" ]; then
            echo "Configuration changes detected"
            SHOULD_DEPLOY="true"
          else
            echo "No deployment-relevant changes detected"
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "🎯 Deployment Environment: $ENV"
          echo "📋 Should Deploy: $SHOULD_DEPLOY"
      
      # Run quick tests
      - name: 🧪 Run Quick Validation Tests
        if: steps.validation.outputs.should_deploy == 'true'
        run: |
          echo "Running quick validation..."
          
          # Check render.yaml syntax
          if command -v python3 &> /dev/null; then
            python3 -c "import yaml; yaml.safe_load(open('render.yaml', 'r'))"
            echo "✅ render.yaml syntax is valid"
          fi
          
          # Check backend requirements
          if [ -f "crypto-tracker-backend/requirements.txt" ]; then
            echo "✅ Backend requirements.txt exists"
          fi
          
          # Check frontend package.json
          if [ -f "crypto-tracker-frontend/package.json" ]; then
            echo "✅ Frontend package.json exists"
          fi

  # -----------------------------------------------
  # BUILD AND TEST
  # -----------------------------------------------
  
  build-and-test:
    name: 🏗️ Build and Test
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      # Backend Build and Test
      - name: 🐍 Setup Python (Backend)
        if: matrix.component == 'backend' && needs.pre-deployment-checks.outputs.backend_changed == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🏗️ Build Backend
        if: matrix.component == 'backend' && needs.pre-deployment-checks.outputs.backend_changed == 'true'
        working-directory: ./crypto-tracker-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Run basic import test
          python -c "import app; print('Backend imports successfully')"
          
          echo "✅ Backend build completed"
      
      # Frontend Build and Test  
      - name: 🟢 Setup Node.js (Frontend)
        if: matrix.component == 'frontend' && needs.pre-deployment-checks.outputs.frontend_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: crypto-tracker-frontend/package-lock.json
      
      - name: 🏗️ Build Frontend
        if: matrix.component == 'frontend' && needs.pre-deployment-checks.outputs.frontend_changed == 'true'
        working-directory: ./crypto-tracker-frontend
        run: |
          npm ci
          npm run build
          
          # Check if build created dist folder
          if [ -d "dist" ]; then
            echo "✅ Frontend build completed successfully"
            ls -la dist/
          else
            echo "❌ Frontend build failed - no dist folder"
            exit 1
          fi

  # -----------------------------------------------
  # RENDER DEPLOYMENT
  # -----------------------------------------------
  
  deploy-to-render:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-test]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    environment: 
      name: ${{ needs.pre-deployment-checks.outputs.deployment_env }}
      url: ${{ steps.deployment.outputs.app_url }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Install Render CLI
      - name: 🔧 Install Render CLI
        run: |
          # Download and install Render CLI
          curl -fsSL https://cli.render.com/install | sh
          # Add to PATH for current step
          export PATH="$HOME/.render/bin:$PATH"
          # Verify installation works
          $HOME/.render/bin/render --version || echo "❌ Render CLI installation failed"
          # Add to GitHub PATH for subsequent steps
          echo "$HOME/.render/bin" >> $GITHUB_PATH
      
      # Authenticate with Render
      - name: 🔐 Authenticate with Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Use absolute path instead of relying on PATH
          $HOME/.render/bin/render auth login --api-key $RENDER_API_KEY
          echo "✅ Authenticated with Render"
      
      # Deploy to Render using Blueprint
      - name: 🚀 Deploy to Render
        id: deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DEPLOYMENT_ENV: ${{ needs.pre-deployment-checks.outputs.deployment_env }}
        run: |
          echo "🚀 Starting deployment to $DEPLOYMENT_ENV..."
          
          # Deploy using render.yaml blueprint
          if [ "$DEPLOYMENT_ENV" = "production" ]; then
            # Production deployment
            render blueprint apply --yes
            
            # Get service URLs
            FRONTEND_URL=$(render service list --format json | jq -r '.[] | select(.name=="crypto-tracker-frontend") | .url')
            BACKEND_URL=$(render service list --format json | jq -r '.[] | select(.name=="crypto-tracker-backend") | .url')
            
          elif [ "$DEPLOYMENT_ENV" = "preview" ]; then
            # Preview deployment  
            render blueprint apply --preview --yes
            
            # Get preview URLs (these will be different)
            FRONTEND_URL=$(render service list --format json | jq -r '.[] | select(.name | contains("preview")) | select(.name | contains("frontend")) | .url')
            BACKEND_URL=$(render service list --format json | jq -r '.[] | select(.name | contains("preview")) | select(.name | contains("backend")) | .url')
          fi
          
          echo "app_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "api_url=$BACKEND_URL" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment initiated successfully!"
          echo "🌐 Frontend URL: $FRONTEND_URL"
          echo "🔗 Backend URL: $BACKEND_URL"

  # -----------------------------------------------
  # POST-DEPLOYMENT VERIFICATION
  # -----------------------------------------------
  
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-to-render]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 60  # Give services time to start
      
      - name: 🏥 Health Check Backend
        if: needs.pre-deployment-checks.outputs.backend_changed == 'true'
        continue-on-error: true
        run: |
          BACKEND_URL="${{ needs.deploy-to-render.outputs.api_url }}"
          
          if [ -n "$BACKEND_URL" ]; then
            echo "🔍 Checking backend health: $BACKEND_URL/api/health"
            
            # Wait for backend to be ready (up to 5 minutes)
            for i in {1..30}; do
              if curl -f -s "$BACKEND_URL/api/health" > /dev/null; then
                echo "✅ Backend health check passed"
                curl -s "$BACKEND_URL/api/health" | jq '.'
                break
              else
                echo "⏳ Attempt $i/30 - Backend not ready, waiting..."
                sleep 10
              fi
            done
          else
            echo "⚠️ Backend URL not available for health check"
          fi
      
      - name: 🌐 Verify Frontend
        if: needs.pre-deployment-checks.outputs.frontend_changed == 'true'
        continue-on-error: true
        run: |
          FRONTEND_URL="${{ needs.deploy-to-render.outputs.app_url }}"
          
          if [ -n "$FRONTEND_URL" ]; then
            echo "🔍 Checking frontend: $FRONTEND_URL"
            
            # Check if frontend loads
            if curl -f -s "$FRONTEND_URL" | grep -q "crypto"; then
              echo "✅ Frontend is accessible and contains expected content"
            else
              echo "⚠️ Frontend check inconclusive"
            fi
          else
            echo "⚠️ Frontend URL not available for verification"
          fi
      
      # Run post-deployment tests
      - name: 🧪 Run Post-deployment Tests
        continue-on-error: true
        run: |
          echo "🧪 Running post-deployment validation..."
          
          # Test API endpoints if backend URL is available
          BACKEND_URL="${{ needs.deploy-to-render.outputs.api_url }}"
          if [ -n "$BACKEND_URL" ]; then
            # Test basic endpoints
            echo "Testing /api/health endpoint..."
            curl -f "$BACKEND_URL/api/health" || echo "Health endpoint test failed"
            
            echo "Testing /api/prices endpoint..."
            curl -f "$BACKEND_URL/api/prices" || echo "Prices endpoint test failed"
          fi
          
          echo "✅ Post-deployment tests completed"

  # -----------------------------------------------
  # DEPLOYMENT NOTIFICATION
  # -----------------------------------------------
  
  notify-deployment:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-to-render, verify-deployment]
    if: always() && needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    steps:
      - name: 📊 Generate Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.pre-deployment-checks.outputs.deployment_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add URLs if available
          if [ -n "${{ needs.deploy-to-render.outputs.app_url }}" ]; then
            echo "**🌐 Frontend URL:** ${{ needs.deploy-to-render.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${{ needs.deploy-to-render.outputs.api_url }}" ]; then
            echo "**🔗 Backend URL:** ${{ needs.deploy-to-render.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add status
          if [ "${{ needs.verify-deployment.result }}" = "success" ]; then
            echo "**✅ Status:** Deployment successful and verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "**⚠️ Status:** Deployment completed but verification had issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📈 Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application performance in Render dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Check logs for any issues" >> $GITHUB_STEP_SUMMARY
          echo "- Verify all features are working correctly" >> $GITHUB_STEP_SUMMARY